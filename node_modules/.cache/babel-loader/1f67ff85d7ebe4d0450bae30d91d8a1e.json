{"ast":null,"code":"import db from \"./firebase\";\nimport sampleData from \"./sample-data.json\";\n\nasync function loadSampleData() {\n  sampleData.map(addMovie);\n}\n\nasync function addMovie({\n  title,\n  rating,\n  releaseYear,\n  viewed\n}) {\n  try {\n    const data = {\n      title,\n      rating,\n      releaseYear,\n      viewed\n    }; // Look up a movie matching the title and release year.\n\n    const snapshot = await db.collection(\"movies\").where(\"title\", \"==\", title).where(\"releaseYear\", \"==\", releaseYear).where(\"viewed\", \"==\", viewed).get(); // Create a doc reference that points to where this movie is located in the DB - either a new\n    // doc if it is not there, or the existing doc.\n\n    let docRef;\n\n    if (snapshot.empty) {\n      docRef = db.collection(\"movies\").doc();\n    } else {\n      docRef = snapshot.docs[0].ref;\n    } // Update the doc with the given data.\n\n\n    await docRef.set(data);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default loadSampleData;","map":{"version":3,"sources":["/Users/lizzyndarcy/Desktop/CCC-Fall2020/CodeSprint-B/Week 03/firebase-movie-demo-starter/src/data/load-sample-data.js"],"names":["db","sampleData","loadSampleData","map","addMovie","title","rating","releaseYear","viewed","data","snapshot","collection","where","get","docRef","empty","doc","docs","ref","set","error","console","log"],"mappings":"AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,UAAP,MAAuB,oBAAvB;;AAEA,eAAeC,cAAf,GAAgC;AAC9BD,EAAAA,UAAU,CAACE,GAAX,CAAeC,QAAf;AACD;;AAED,eAAeA,QAAf,CAAwB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,WAAjB;AAA8BC,EAAAA;AAA9B,CAAxB,EAAgE;AAC9D,MAAI;AACF,UAAMC,IAAI,GAAG;AAAEJ,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBC,MAAAA,WAAjB;AAA8BC,MAAAA;AAA9B,KAAb,CADE,CAGF;;AACA,UAAME,QAAQ,GAAG,MAAMV,EAAE,CACtBW,UADoB,CACT,QADS,EAEpBC,KAFoB,CAEd,OAFc,EAEL,IAFK,EAECP,KAFD,EAGpBO,KAHoB,CAGd,aAHc,EAGC,IAHD,EAGOL,WAHP,EAIpBK,KAJoB,CAId,QAJc,EAIJ,IAJI,EAIEJ,MAJF,EAKpBK,GALoB,EAAvB,CAJE,CAWF;AACA;;AACA,QAAIC,MAAJ;;AACA,QAAIJ,QAAQ,CAACK,KAAb,EAAoB;AAClBD,MAAAA,MAAM,GAAGd,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwBK,GAAxB,EAAT;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,GAAGJ,QAAQ,CAACO,IAAT,CAAc,CAAd,EAAiBC,GAA1B;AACD,KAlBC,CAoBF;;;AACA,UAAMJ,MAAM,CAACK,GAAP,CAAWV,IAAX,CAAN;AACD,GAtBD,CAsBE,OAAOW,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,eAAelB,cAAf","sourcesContent":["import db from \"./firebase\";\nimport sampleData from \"./sample-data.json\";\n\nasync function loadSampleData() {\n  sampleData.map(addMovie);\n}\n\nasync function addMovie({ title, rating, releaseYear, viewed }) {\n  try {\n    const data = { title, rating, releaseYear, viewed };\n\n    // Look up a movie matching the title and release year.\n    const snapshot = await db\n      .collection(\"movies\")\n      .where(\"title\", \"==\", title)\n      .where(\"releaseYear\", \"==\", releaseYear)\n      .where(\"viewed\", \"==\", viewed)\n      .get();\n\n    // Create a doc reference that points to where this movie is located in the DB - either a new\n    // doc if it is not there, or the existing doc.\n    let docRef;\n    if (snapshot.empty) {\n      docRef = db.collection(\"movies\").doc();\n    } else {\n      docRef = snapshot.docs[0].ref;\n    }\n\n    // Update the doc with the given data.\n    await docRef.set(data);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default loadSampleData;\n"]},"metadata":{},"sourceType":"module"}