{"ast":null,"code":"var _jsxFileName = \"/Users/lizzyndarcy/Desktop/CCC-Fall2020/CodeSprint-B/Week 03/firebase-movie-demo-starter/src/components/movie-listing.js\";\nimport React, { useState, useEffect } from \"react\";\nimport LoadingSpinner from \"./loading-spinner\";\nimport ErrorMessage from \"./error-message\";\nimport { moviesCollection } from \"../data/firebase\";\nimport Movie from \"./movie\";\nimport \"./movie-listing.css\";\nimport db from \"../data/firebase\"; // useEffect Hook:\n// > Guide, https://reactjs.org/docs/hooks-effect.html\n// > API Docs, https://reactjs.org/docs/hooks-reference.html#useeffect\n\nfunction MovieListing() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\"); //useEffect allows us to run side-effects after rendering.\n  // Passing in an empty array for the 2nd paramater allows us to run the effect conditionally\n  // and only when the ocmponenet mounts to the page.\n\n  useEffect(() => {\n    //Method 1 of reading the databate - read only once:\n    // async function getAllMovies() {\n    //   setIsLoading(true);\n    //   try {\n    //     const snapshot = await moviesCollection.get();\n    //     const docs = snapshot.docs;\n    //     //This is so that we can test our error flow:\n    //     // throw new Error(\"Something has gone wrong!\");\n    //     setMovies(docs);\n    //   } catch (error) {\n    //     setErrorMessage(\"There was a problem loading your movie ratings. Please try again.\");\n    //     console.error(error);\n    //   }\n    //   setIsLoading(false);\n    // }\n    // getAllMovies();\n    //Method 2 of reading the database - listening for realtime updates:\n    setIsLoading(true);\n\n    const onNext = snapshot => {\n      setIsLoading(false);\n      const docs = snapshot.docs;\n      setMovies(docs);\n    };\n\n    const onError = error => {\n      setErrorMessage(\"There was a problem loading your movie ratings. Please try again.\");\n      console.error(error);\n    };\n\n    const unsubscribe = moviesCollection.onSnapshot(onNext, onError);\n    return unsubscribe;\n  }, []); // db.collection(\"movies\")\n  //   .orderBy(\"rating\")\n  //   .limit(4)\n  //   .get()\n  //   .then(function (querySnapshot) {\n  //     querySnapshot.forEach(function (doc) {\n  //       console.log(doc.rating, \" => \", doc.data());\n  //     });\n  //   });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Movies\"), isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    size: \"50px\",\n    spinnerColor: \"white\",\n    backgroundColor: \"rgb(255, 255, 255, 0.2)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), errorMessage && /*#__PURE__*/React.createElement(ErrorMessage, {\n    displayAsCard: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 24\n    }\n  }, errorMessage), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"movie-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, movies.map(movieDoc => {\n    const movieId = movieDoc.id;\n    const movieData = movieDoc.data();\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: movieId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Movie, {\n      id: movieId,\n      data: movieData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    }));\n  })));\n}\n\nexport default MovieListing;","map":{"version":3,"sources":["/Users/lizzyndarcy/Desktop/CCC-Fall2020/CodeSprint-B/Week 03/firebase-movie-demo-starter/src/components/movie-listing.js"],"names":["React","useState","useEffect","LoadingSpinner","ErrorMessage","moviesCollection","Movie","db","MovieListing","movies","setMovies","isLoading","setIsLoading","errorMessage","setErrorMessage","onNext","snapshot","docs","onError","error","console","unsubscribe","onSnapshot","map","movieDoc","movieId","id","movieData","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CAEA;AACA;AACA;;AAEA,SAASC,YAAT,GAAwB;AACtB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD,CAHsB,CAKtB;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAU,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAMG,MAAM,GAAIC,QAAD,IAAc;AAC3BJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMK,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACAP,MAAAA,SAAS,CAACO,IAAD,CAAT;AACD,KAJD;;AAKA,UAAMC,OAAO,GAAIC,KAAD,IAAW;AACzBL,MAAAA,eAAe,CAAC,mEAAD,CAAf;AACAM,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAHD;;AAIA,UAAME,WAAW,GAAGhB,gBAAgB,CAACiB,UAAjB,CAA4BP,MAA5B,EAAoCG,OAApC,CAApB;AACA,WAAOG,WAAP;AACD,GA9BQ,EA8BN,EA9BM,CAAT,CARsB,CAwCtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGV,SAAS,iBACR,oBAAC,cAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,YAAY,EAAC,OAFf;AAGE,IAAA,eAAe,EAAC,yBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EASGE,YAAY,iBAAI,oBAAC,YAAD;AAAc,IAAA,aAAa,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BA,YAA7B,CATnB,eAUE;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,MAAM,CAACc,GAAP,CAAYC,QAAD,IAAc;AACxB,UAAMC,OAAO,GAAGD,QAAQ,CAACE,EAAzB;AACA,UAAMC,SAAS,GAAGH,QAAQ,CAACI,IAAT,EAAlB;AACA,wBACE;AAAI,MAAA,GAAG,EAAEH,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAEA,OAAX;AAAoB,MAAA,IAAI,EAAEE,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GARA,CADH,CAVF,CADF;AAwBD;;AAED,eAAenB,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport LoadingSpinner from \"./loading-spinner\";\nimport ErrorMessage from \"./error-message\";\nimport { moviesCollection } from \"../data/firebase\";\nimport Movie from \"./movie\";\nimport \"./movie-listing.css\";\nimport db from \"../data/firebase\";\n\n// useEffect Hook:\n// > Guide, https://reactjs.org/docs/hooks-effect.html\n// > API Docs, https://reactjs.org/docs/hooks-reference.html#useeffect\n\nfunction MovieListing() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  //useEffect allows us to run side-effects after rendering.\n  // Passing in an empty array for the 2nd paramater allows us to run the effect conditionally\n  // and only when the ocmponenet mounts to the page.\n  useEffect(() => {\n    //Method 1 of reading the databate - read only once:\n    // async function getAllMovies() {\n    //   setIsLoading(true);\n    //   try {\n    //     const snapshot = await moviesCollection.get();\n    //     const docs = snapshot.docs;\n    //     //This is so that we can test our error flow:\n    //     // throw new Error(\"Something has gone wrong!\");\n    //     setMovies(docs);\n    //   } catch (error) {\n    //     setErrorMessage(\"There was a problem loading your movie ratings. Please try again.\");\n    //     console.error(error);\n    //   }\n    //   setIsLoading(false);\n    // }\n    // getAllMovies();\n    //Method 2 of reading the database - listening for realtime updates:\n    setIsLoading(true);\n    const onNext = (snapshot) => {\n      setIsLoading(false);\n      const docs = snapshot.docs;\n      setMovies(docs);\n    };\n    const onError = (error) => {\n      setErrorMessage(\"There was a problem loading your movie ratings. Please try again.\");\n      console.error(error);\n    };\n    const unsubscribe = moviesCollection.onSnapshot(onNext, onError);\n    return unsubscribe;\n  }, []);\n\n  // db.collection(\"movies\")\n  //   .orderBy(\"rating\")\n  //   .limit(4)\n  //   .get()\n  //   .then(function (querySnapshot) {\n  //     querySnapshot.forEach(function (doc) {\n  //       console.log(doc.rating, \" => \", doc.data());\n  //     });\n  //   });\n\n  return (\n    <div className=\"movies-container\">\n      <h1>Movies</h1>\n      {isLoading && (\n        <LoadingSpinner\n          size=\"50px\"\n          spinnerColor=\"white\"\n          backgroundColor=\"rgb(255, 255, 255, 0.2)\"\n        />\n      )}\n      {errorMessage && <ErrorMessage displayAsCard>{errorMessage}</ErrorMessage>}\n      <ul className=\"movie-list\">\n        {movies.map((movieDoc) => {\n          const movieId = movieDoc.id;\n          const movieData = movieDoc.data();\n          return (\n            <li key={movieId}>\n              <Movie id={movieId} data={movieData} />\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default MovieListing;\n"]},"metadata":{},"sourceType":"module"}